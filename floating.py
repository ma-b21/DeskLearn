# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'floating.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QPropertyAnimation, QRect, Qt
from PyQt5.QtGui import QPainter, QPaintEvent, QRegion
from PyQt5.QtWidgets import QApplication, QWidget


class Ui_Floating(object):
    def setupUi(self, Form):
        Form.setObjectName("Floating")
        self.setGeometry(0, 0, 50, 50)
        Form.setFixedSize(50, 50)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(6, 6, 38, 38))
        font = QtGui.QFont()
        font.setFamily("Bauhaus 93")
        font.setPointSize(25)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label.setStyleSheet(
            "border-radius: 19px; background-color: rgba(165, 49, 170, 1);")
        self.setWindowOpacity(0.9)

        self.setStyleSheet(
            "background-color: rgba(165, 49, 170, 0.6);\
             color: rgb(255, 255, 255);")

        self.setWindowFlags(Qt.WindowStaysOnTopHint |
                            Qt.FramelessWindowHint |
                            Qt.Tool)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("", ""))
        self.label.setText(_translate("Floating", "D"))


class FloatWindow(QWidget, Ui_Floating):
    clicked = QtCore.pyqtSignal()
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.enterEvent = self.setFocus
        self.leaveEvent = self.setFocusOut

        self.dragging = False
        self.offset = None
        self.snap = False

        self.initialPos = QtCore.QPoint(0, 0)
        self.finalPos = QtCore.QPoint(0, 0)

        self.animation = QPropertyAnimation(self, b"geometry")
        self.animation.setDuration(100)

    def paintEvent(self, event: QPaintEvent):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        mask = QRegion(self.rect(), QRegion.Ellipse)
        self.setMask(mask)

        super().paintEvent(event)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton and not self.dragging:
            self.dragging = True
            # 获取当前窗口坐标
            self.offset = event.pos()
            self.initialPos = event.globalPos()

    def mouseMoveEvent(self, event):
        if self.dragging:
            new_pos = event.globalPos() - self.offset
            screen_geometry = QApplication.desktop().screenGeometry()

            if new_pos.x() < screen_geometry.left() + 15:
                self.snap = True
                new_pos.setX(screen_geometry.left())
            elif new_pos.x() + self.width() > screen_geometry.right() - 15:
                self.snap = True
                new_pos.setX(screen_geometry.right() - self.width())
            elif new_pos.y() < screen_geometry.top() + 15:
                self.snap = True
                new_pos.setY(screen_geometry.top())
            elif new_pos.y() + self.height() > screen_geometry.bottom() - 15:
                self.snap = True
                new_pos.setY(screen_geometry.bottom() - self.height())
            else:
                self.snap = False

            self.move(new_pos)

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton and self.dragging:
            self.dragging = False
            self.finalPos = event.globalPos()
            if self.initialPos == self.finalPos:
                self.clicked.emit()

    def setFocus(self, event=None):
        # 鼠标悬停
        self.setWindowOpacity(1)
        self.setStyleSheet(
            "background-color: rgba(165, 49, 170, 0.8);\
             color: rgb(255, 255, 255)"
        )
        screen_geometry = QApplication.desktop().screenGeometry()
        if self.snap:
            if self.pos().x() < screen_geometry.left():
                self.animation.setEndValue(
                    QRect(-1, self.pos().y(), self.width(), self.height()))
            elif self.pos().x() + self.width() > screen_geometry.right():
                self.animation.setEndValue(
                    QRect(
                        screen_geometry.width() - self.width() + 1,
                        self.pos().y(), self.width(), self.height()
                    )
                )
            elif self.pos().y() < screen_geometry.top():
                self.animation.setEndValue(
                    QRect(self.pos().x(), -1, self.width(), self.height()))
            elif self.pos().y() + self.height() > screen_geometry.bottom():
                self.animation.setEndValue(
                    QRect(
                        self.pos().x(),
                        screen_geometry.height() - self.height() + 1,
                        self.width(), self.height()
                    )
                )
            self.animation.start()

    def setFocusOut(self, event=None):
        # 鼠标离开
        self.setWindowOpacity(0.9)
        self.setStyleSheet(
            "background-color: rgba(165, 49, 170, 0.6);\
             color: rgb(255, 255, 255);")
        screen_geometry = QApplication.desktop().screenGeometry()
        if self.snap:
            if self.pos().x() <= screen_geometry.left():
                self.animation.setEndValue(
                    QRect(-25, self.pos().y(), self.width(), self.height()))
            elif self.pos().x() + self.width() >= screen_geometry.right():
                self.animation.setEndValue(QRect(screen_geometry.width(
                ) - 25, self.pos().y(), self.width(), self.height()))
            elif self.pos().y() <= screen_geometry.top():
                self.animation.setEndValue(
                    QRect(self.pos().x(), -25, self.width(), self.height()))
            elif self.pos().y() + self.height() >= screen_geometry.bottom():
                self.animation.setEndValue(
                    QRect(
                        self.pos().x(),
                        screen_geometry.height() - 25,
                        self.width(),
                        self.height()
                    )
                )
            self.animation.start()
